// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityUpdate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EntityUpdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EntityUpdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EntityUpdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EntityUpdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EntityUpdate_2eproto;
namespace AM {
namespace pb {
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityUpdate;
class EntityUpdateDefaultTypeInternal;
extern EntityUpdateDefaultTypeInternal _EntityUpdate_default_instance_;
}  // namespace pb
}  // namespace AM
PROTOBUF_NAMESPACE_OPEN
template<> ::AM::pb::Entity* Arena::CreateMaybeMessage<::AM::pb::Entity>(Arena*);
template<> ::AM::pb::EntityUpdate* Arena::CreateMaybeMessage<::AM::pb::EntityUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AM {
namespace pb {

enum Entity_InputState : int {
  Entity_InputState_Invalid = 0,
  Entity_InputState_Pressed = 1,
  Entity_InputState_Release = 2,
  Entity_InputState_Entity_InputState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Entity_InputState_Entity_InputState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Entity_InputState_IsValid(int value);
constexpr Entity_InputState Entity_InputState_InputState_MIN = Entity_InputState_Invalid;
constexpr Entity_InputState Entity_InputState_InputState_MAX = Entity_InputState_Release;
constexpr int Entity_InputState_InputState_ARRAYSIZE = Entity_InputState_InputState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Entity_InputState_descriptor();
template<typename T>
inline const std::string& Entity_InputState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Entity_InputState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Entity_InputState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Entity_InputState_descriptor(), enum_t_value);
}
inline bool Entity_InputState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Entity_InputState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Entity_InputState>(
    Entity_InputState_descriptor(), name, value);
}
// ===================================================================

class Entity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AM.pb.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  virtual ~Entity();

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entity& default_instance();

  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(nullptr);
  }

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AM.pb.Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityUpdate_2eproto);
    return ::descriptor_table_EntityUpdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Entity_InputState InputState;
  static constexpr InputState Invalid =
    Entity_InputState_Invalid;
  static constexpr InputState Pressed =
    Entity_InputState_Pressed;
  static constexpr InputState Release =
    Entity_InputState_Release;
  static inline bool InputState_IsValid(int value) {
    return Entity_InputState_IsValid(value);
  }
  static constexpr InputState InputState_MIN =
    Entity_InputState_InputState_MIN;
  static constexpr InputState InputState_MAX =
    Entity_InputState_InputState_MAX;
  static constexpr int InputState_ARRAYSIZE =
    Entity_InputState_InputState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InputState_descriptor() {
    return Entity_InputState_descriptor();
  }
  template<typename T>
  static inline const std::string& InputState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InputState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InputState_Name.");
    return Entity_InputState_Name(enum_t_value);
  }
  static inline bool InputState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InputState* value) {
    return Entity_InputState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputStatesFieldNumber = 8,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kVelXFieldNumber = 5,
    kVelYFieldNumber = 6,
    kVelZFieldNumber = 7,
  };
  // repeated .AM.pb.Entity.InputState inputStates = 8;
  int inputstates_size() const;
  private:
  int _internal_inputstates_size() const;
  public:
  void clear_inputstates();
  private:
  ::AM::pb::Entity_InputState _internal_inputstates(int index) const;
  void _internal_add_inputstates(::AM::pb::Entity_InputState value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_inputstates();
  public:
  ::AM::pb::Entity_InputState inputstates(int index) const;
  void set_inputstates(int index, ::AM::pb::Entity_InputState value);
  void add_inputstates(::AM::pb::Entity_InputState value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& inputstates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_inputstates();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float velX = 5;
  void clear_velx();
  float velx() const;
  void set_velx(float value);
  private:
  float _internal_velx() const;
  void _internal_set_velx(float value);
  public:

  // float velY = 6;
  void clear_vely();
  float vely() const;
  void set_vely(float value);
  private:
  float _internal_vely() const;
  void _internal_set_vely(float value);
  public:

  // float velZ = 7;
  void clear_velz();
  float velz() const;
  void set_velz(float value);
  private:
  float _internal_velz() const;
  void _internal_set_velz(float value);
  public:

  // @@protoc_insertion_point(class_scope:AM.pb.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> inputstates_;
  mutable std::atomic<int> _inputstates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float x_;
  float y_;
  float z_;
  float velx_;
  float vely_;
  float velz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityUpdate_2eproto;
};
// -------------------------------------------------------------------

class EntityUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AM.pb.EntityUpdate) */ {
 public:
  inline EntityUpdate() : EntityUpdate(nullptr) {}
  virtual ~EntityUpdate();

  EntityUpdate(const EntityUpdate& from);
  EntityUpdate(EntityUpdate&& from) noexcept
    : EntityUpdate() {
    *this = ::std::move(from);
  }

  inline EntityUpdate& operator=(const EntityUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityUpdate& operator=(EntityUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityUpdate& default_instance();

  static inline const EntityUpdate* internal_default_instance() {
    return reinterpret_cast<const EntityUpdate*>(
               &_EntityUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityUpdate& a, EntityUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityUpdate* New() const final {
    return CreateMaybeMessage<EntityUpdate>(nullptr);
  }

  EntityUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityUpdate& from);
  void MergeFrom(const EntityUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AM.pb.EntityUpdate";
  }
  protected:
  explicit EntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityUpdate_2eproto);
    return ::descriptor_table_EntityUpdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .AM.pb.Entity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::AM::pb::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AM::pb::Entity >*
      mutable_entities();
  private:
  const ::AM::pb::Entity& _internal_entities(int index) const;
  ::AM::pb::Entity* _internal_add_entities();
  public:
  const ::AM::pb::Entity& entities(int index) const;
  ::AM::pb::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AM::pb::Entity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:AM.pb.EntityUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AM::pb::Entity > entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityUpdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entity

// uint32 id = 1;
inline void Entity::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entity::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entity::id() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.id)
  return _internal_id();
}
inline void Entity::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Entity::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.id)
}

// float x = 2;
inline void Entity::clear_x() {
  x_ = 0;
}
inline float Entity::_internal_x() const {
  return x_;
}
inline float Entity::x() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.x)
  return _internal_x();
}
inline void Entity::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Entity::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.x)
}

// float y = 3;
inline void Entity::clear_y() {
  y_ = 0;
}
inline float Entity::_internal_y() const {
  return y_;
}
inline float Entity::y() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.y)
  return _internal_y();
}
inline void Entity::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Entity::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.y)
}

// float z = 4;
inline void Entity::clear_z() {
  z_ = 0;
}
inline float Entity::_internal_z() const {
  return z_;
}
inline float Entity::z() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.z)
  return _internal_z();
}
inline void Entity::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Entity::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.z)
}

// float velX = 5;
inline void Entity::clear_velx() {
  velx_ = 0;
}
inline float Entity::_internal_velx() const {
  return velx_;
}
inline float Entity::velx() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.velX)
  return _internal_velx();
}
inline void Entity::_internal_set_velx(float value) {
  
  velx_ = value;
}
inline void Entity::set_velx(float value) {
  _internal_set_velx(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.velX)
}

// float velY = 6;
inline void Entity::clear_vely() {
  vely_ = 0;
}
inline float Entity::_internal_vely() const {
  return vely_;
}
inline float Entity::vely() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.velY)
  return _internal_vely();
}
inline void Entity::_internal_set_vely(float value) {
  
  vely_ = value;
}
inline void Entity::set_vely(float value) {
  _internal_set_vely(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.velY)
}

// float velZ = 7;
inline void Entity::clear_velz() {
  velz_ = 0;
}
inline float Entity::_internal_velz() const {
  return velz_;
}
inline float Entity::velz() const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.velZ)
  return _internal_velz();
}
inline void Entity::_internal_set_velz(float value) {
  
  velz_ = value;
}
inline void Entity::set_velz(float value) {
  _internal_set_velz(value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.velZ)
}

// repeated .AM.pb.Entity.InputState inputStates = 8;
inline int Entity::_internal_inputstates_size() const {
  return inputstates_.size();
}
inline int Entity::inputstates_size() const {
  return _internal_inputstates_size();
}
inline void Entity::clear_inputstates() {
  inputstates_.Clear();
}
inline ::AM::pb::Entity_InputState Entity::_internal_inputstates(int index) const {
  return static_cast< ::AM::pb::Entity_InputState >(inputstates_.Get(index));
}
inline ::AM::pb::Entity_InputState Entity::inputstates(int index) const {
  // @@protoc_insertion_point(field_get:AM.pb.Entity.inputStates)
  return _internal_inputstates(index);
}
inline void Entity::set_inputstates(int index, ::AM::pb::Entity_InputState value) {
  inputstates_.Set(index, value);
  // @@protoc_insertion_point(field_set:AM.pb.Entity.inputStates)
}
inline void Entity::_internal_add_inputstates(::AM::pb::Entity_InputState value) {
  inputstates_.Add(value);
}
inline void Entity::add_inputstates(::AM::pb::Entity_InputState value) {
  // @@protoc_insertion_point(field_add:AM.pb.Entity.inputStates)
  _internal_add_inputstates(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Entity::inputstates() const {
  // @@protoc_insertion_point(field_list:AM.pb.Entity.inputStates)
  return inputstates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Entity::_internal_mutable_inputstates() {
  return &inputstates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Entity::mutable_inputstates() {
  // @@protoc_insertion_point(field_mutable_list:AM.pb.Entity.inputStates)
  return _internal_mutable_inputstates();
}

// -------------------------------------------------------------------

// EntityUpdate

// repeated .AM.pb.Entity entities = 1;
inline int EntityUpdate::_internal_entities_size() const {
  return entities_.size();
}
inline int EntityUpdate::entities_size() const {
  return _internal_entities_size();
}
inline void EntityUpdate::clear_entities() {
  entities_.Clear();
}
inline ::AM::pb::Entity* EntityUpdate::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:AM.pb.EntityUpdate.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AM::pb::Entity >*
EntityUpdate::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:AM.pb.EntityUpdate.entities)
  return &entities_;
}
inline const ::AM::pb::Entity& EntityUpdate::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::AM::pb::Entity& EntityUpdate::entities(int index) const {
  // @@protoc_insertion_point(field_get:AM.pb.EntityUpdate.entities)
  return _internal_entities(index);
}
inline ::AM::pb::Entity* EntityUpdate::_internal_add_entities() {
  return entities_.Add();
}
inline ::AM::pb::Entity* EntityUpdate::add_entities() {
  // @@protoc_insertion_point(field_add:AM.pb.EntityUpdate.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AM::pb::Entity >&
EntityUpdate::entities() const {
  // @@protoc_insertion_point(field_list:AM.pb.EntityUpdate.entities)
  return entities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace AM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AM::pb::Entity_InputState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AM::pb::Entity_InputState>() {
  return ::AM::pb::Entity_InputState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EntityUpdate_2eproto
